## structure and stuff I guess?

an introduction (me? does anyone care?)

what is a relational database?

theory?

tables (sets?), schemas, columns, rows

relations are: sets
                of tuples
		of attributes -- aka "rows" of "columns" defined by a "schema"

normalisation and stuff (that requires >1 tables...)

relationships are set operations!

inner join: set intersection
left outer join: A (union) A (intersect) B
cross join: cartesian product

problems in a database

concurrent users / operations

failure cases

phantom reads
dirty reads
non-repeatable reads

Atomicity
Consistency
Isolation
Durability

structured query language

CREATE tables
SELECT, INSERT, UPDATE data

(indexing, transactions?)

exercise > setup some tables?

exercise > select some data
  > select *
  > select col1, col2
  > select _ from x inner join y on
  > select _ from x (left|right)? outer join y on

exercise > reduce redundancy in tables? c.f. "refactoring"

BONUS SESSION

maybe do an example based off a trademe/amazon like auction site
so you can transition easily into talking about dynamo and dynamo-
like systems?

distributing a relational database?

what does it mean to be "transactional" in the face of partitions?

CAP theorem, Cassandra, Riak, there's a wide world out there!

exeunt!
